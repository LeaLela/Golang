GoLang

2.predavanje
-ne korištene varijable i importi su error
-nije objektno orjentiran - nema klasa
-nema nasljeđivanja

-varijabla
-tip podataka
-konstante

-string
-rune-integer 32, predstavlja karaktere kroz unicode vrijednosti
-byte,int,int8,int16,int32,int64,ruen,unit,unit8...
-float32/64
-complex64/128-imaginarni i realni dio brojeva
-*T, pointer to type T

-array [n]T
-slice []T - kad ne znamo koliko treba zauzet array
-struct{} - kao objekt
-map [K]T - K - key, T - value
-interface {}

Deklaracija varijabli
-var keyword
-deklaracija - stvaranje varijable
-incijalizacija - dodjeljivanje vrijednosti varijabli

var brand string
brand = "apple"

var brandName string = "apple"

name := "apple"

var x, y, z = 1, 2, 3

:= 
- samo u scopeu funkcije, 
- ne može se koristiti za update vrijednosti varijable. Treba koristiti =

/////
package main

import "fmt"

func main() {
	var firstName string = "Lea"
	var age int = 23
	var height float64 = 1.75
	var isStudent bool = true

	fmt.Println(firstName, age, height, isStudent)
}
/////

1. := samo lokalne varijable tj. samo u scopeu funkcije
2. koristiti zero value
3. dodavati tipove podataka
4. izbjegavati neiskorištene varijable tj. bit ce error

Konstante
-typed - tip podatka konstante je specificiran
-untyped - tip se nasljeđuje iz vrijednosti varijable

Zero values
-varijable su automatski inicijalizirane sa null vrijednosti ako drukčije nije odrađeno
-string - "" - empty string
-int,float - 0 , 0.0
-bool - False
-array - svaki index ima zero value
-struct - prazan struct gdje svaki član ima zero value
-pointer, interface, function, channel, slice, map - nil

Konverzije tipova
-da bi odradili bilo kakvu operaciju, tipovi podataka varijabli moraju biti isti
-ne može kombinirati različite tipove podataka, izbacit ce compilation error
-rješenje za to:
	var pi float64 = 3.14
	var radius int = 5
	var circle float64 = 2 * pi * float54(radius)

Scope varijable
-global varijabla - na vrhu deklarirana, dostupna na svim scopeovima, nije dobro koristiti - memory leap/spike
-lokalna varijabla - 
-block scope -



3.predavanje

Strukture

struct Dog{
	name string
	age float
}
-najbliže objektu
-value type - when asssignig a struct to another struct, a copy is made
-named fields - each field in struct has it's name and type
-methods

-struktura može biti metoda, može biti proširena koristeći kompozicije

Stvaranje novog projekta
go mod init learajic/code-camp/3

Objekti u GO 
-svi tipovi podataka mogu bit Objekti
-kompozicija - struct ili interface 
-go ne podržava nasljeđivanje nema class keyworda

Metode
-funkcija koja se može pozivat samo na tipu podatka kojim je definirana, eksplicitno vezana za specifični tip
-nema private i public, nego sa velikim i malim slovom to označavamo. Veliko slovo ima veću važnost nego malo slovo.
-kada koristimo pakete metode i strukture nazivamo velikim slovom da bi im mogli pristupiti u drugim paketima

Receiver metode
-best by value - stvara se kopija strukture
-value Receiver - stvara kopiju i nad kopijom poziva funkcije itd.
-pointer Receiver - šalje adresu na varijablu/strukturu, a ne na kopiju - zato ovo treba koristiti ako ćemo mijenjati propertije jer original mijenja


4.predavanje

-value receiver - koristimo kada čitamo podatke i kada koristimo manje strukture
-pointer receiver - sigurnije koristiti, možemo mijenjati izvorni podatak i čitati ga 

//incijalizacija pointer receiver
func (p *Person) greet() {
	fmt.Printf("Hello, my name is: %s %s and I am %d years old", p.FirstName, p.LastName, p.Age)
}

Control Flows
-if / if else - 
	-zagrade nisu potrebne, vitičaste su potrebne
-switch
	-može se koristiti kao expression i kao type switch
-for
-go to

-while i doWhile petlje nema u Go-u

Arrays slices and maps


5.predavanje

For statement
-break
-continue

For...range statement
-break
-continue

	numbers := []int{1, 2, 3, 4, 5, 6, 7, 8, 9}
	for index, value := range numbers {
		fmt.Println(index, value)
	}

Array
-kolekcija fiksne veličine gdje svi elementi moraju biti istog tipa
-ne može se mijenjati veličina
-indexi startaju od 0
-len() - vraća duljinu arraya
-cap() - vraća capacity arraya

Slice
-ordered collection of unspecified size
-nema određenu fiksnu veličine
-svi elementi su istog tipa
-append() - add more elements to the slice
-len() - vraća duljinu arraya
-cap() - vraća capacity arraya

Map
-kolekcija key value parova
-svi elementi kao i keys/indexi su istog tipa
-keys/indexi are uniqe(neki tip podatka koji smo mi odredili da nam treba)
-unordered, redoslijed elemenata nije uvijek isti


6. predavanje

Funkcije
//
func function_name(Parameter-list)(Return_type){
    // function body.....
}
//

/*
func main() {
	fmt.Println(greet())
}

func greet() string {
	return "Greetings!"
} 
*/
//vraća string i moramo ili spremiti u varijablu ili preko println pozvati


/*
func main() {
	fmt.Println(greet("CodeCamper"))
}

func greet(name string) string {
	return fmt.Sprintf("Greetings %s!", name)
}
*/
//vraća ime

Vrijabilni parametri (Variadic Parameter)
-ne mora se pojaviti
-ima jednu vrijednosti
-ima više vrijednosti
-imaju trotočje ispred tipa podatka
-ako prosljeđujemo listu imena želimo imati mogućnost da ima jedno ime, više imena, ili ako nema ništa
-greet(names...) - unpack slice, razdvoji slice ime po ime
/*
func main() {
	greet("CodeCamper", "CodeGuru", "CodeWizard")
}

func greet(names ...string) {
	for _, name := range names{
		fmt.Printf("Greetings %s!\n", name)
	}
}
*/
/*
func main() {
	names := []string{"Code", "Camper"}
	greet(names...)
}

func greet(names ...string) {
	for _, name := range names{
		fmt.Printf("Greetings %s!\n", name)
	}
}
*/

Return values
-može biti više return values
/*
func main() {
	//names := []string{"Code", "Camper"}
	p := Person{"John", "Doe"}
	name, lastname := greet(p)

	fmt.Println(name)
	fmt.Println(lastname)
}

func greet(person Person) (string, string) {
	return person.Name, person.Lastname
}
*/

_ označava skrivanje varijable ako nam u tom trenu nije potrebna
/*
	name, _/*lastname*/ := greet(p)

	fmt.Println(name)
	//fmt.Println(lastname)
*/

Named return parameters
/*
type Person struct{
	Name string
	Lastname string
}

func main() {
	//names := []string{"Code", "Camper"}
	p := Person{"John", "Doe"}
	name, lastname := greet(p)

	fmt.Println(name)
	fmt.Println(lastname)
}

func greet(person Person) (name string, lastname string) {
	//return person.Name, person.Lastname
	name = person.Name
	lastname = person.Lastname

	return
}
*/

Error handling
-nema try catch blokova kao u Javi
-error je tip podatka - biult-in interface with a single method: Error() string
/*
import "errors"
func main() {
	r, err := divide(5, 0)
	if err != nil{
		fmt.Printf("Error while dividing two numbers: %v", err.Error())
		return
	}
	fmt.Println(r)
}

func divide(a,b int) (int, error){
	if b==0{
		return 0, errors.New("cannot divide by zero")
	}
	return a / b, nil
}
*/

/*

type DivisionError struct {
	FirstNumber int
	SecondNumber int
	Message string

}

func (de *DivisionError) Error() string {
	return fmt.Sprintf("division error: %d / %d, err: %s", de.FirstNumber, de.SecondNumber, de.Message)
}
func main() {
	r, err := divide(5, 0)
	if err != nil{
		fmt.Printf("Error while dividing two numbers: %v", err.Error())
		return
	}
	fmt.Println(r)
}

func divide(a,b int) (int, error){
	if b==0{
		return 0, &DivisionError{a, b, "cannot divide by zero"}
	}
	return a / b, nil
}
*/
